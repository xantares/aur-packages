--- cpp/CMakeLists.txt.orig	2014-04-02 17:44:16.532345880 +0200
+++ cpp/CMakeLists.txt	2014-04-02 17:44:16.532345880 +0200
@@ -1,6 +1,8 @@
-CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0)
+CMAKE_MINIMUM_REQUIRED(VERSION 2.8.6)
 PROJECT(polyclipping)
 
+INCLUDE (GenerateExportHeader)
+
 SET(CMAKE_BUILD_TYPE "Release" CACHE STRING "Release type")
 # The header name clipper.hpp is too generic, so install in a subdirectory
 SET(CMAKE_INSTALL_INCDIR "${CMAKE_INSTALL_PREFIX}/include/polyclipping")
@@ -11,11 +13,17 @@
 SET(BUILD_SHARED_LIBS ON CACHE BOOL
     "Build shared libraries (.dll/.so) instead of static ones (.lib/.a)")
 ADD_LIBRARY(polyclipping clipper.cpp)
+GENERATE_EXPORT_HEADER(polyclipping
+             BASE_NAME polyclipping
+             EXPORT_MACRO_NAME polyclipping_EXPORT
+             EXPORT_FILE_NAME polyclipping_Export.h
+             STATIC_DEFINE polyclipping_BUILT_AS_STATIC
+)
 
 CONFIGURE_FILE (polyclipping.pc.cmakein "${PCFILE}" @ONLY)
 
 INSTALL (FILES clipper.hpp DESTINATION "${CMAKE_INSTALL_INCDIR}")
-INSTALL (TARGETS polyclipping LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}")
+INSTALL (TARGETS polyclipping LIBRARY DESTINATION lib RUNTIME DESTINATION bin)
 INSTALL (FILES "${PCFILE}" DESTINATION "${CMAKE_INSTALL_PKGCONFIGDIR}")
 
 SET_TARGET_PROPERTIES(polyclipping PROPERTIES VERSION 16.0.0 SOVERSION 16 )
--- cpp/clipper.hpp.orig	2014-04-02 17:44:16.531345859 +0200
+++ cpp/clipper.hpp	2014-04-02 17:44:16.530345835 +0200
@@ -50,6 +50,12 @@
 //which has been replace with the ClipperOffset class.
 #define use_deprecated  
 
+// KB168958
+// disable warnings on 255 char debug symbols
+#pragma warning (disable : 4786)
+// disable warnings on extern before template instantiation
+#pragma warning (disable : 4231)
+
 #include <vector>
 #include <set>
 #include <stdexcept>
@@ -58,6 +64,18 @@
 #include <ostream>
 #include <functional>
 
+#if defined (_WIN32) 
+  #if defined(polyclipping_EXPORTS)
+    #define  CLIPPER_EXPORT __declspec(dllexport)
+    #define  CLIPPER_IMPEXP
+  #else
+    #define  CLIPPER_EXPORT __declspec(dllimport)
+    #define  CLIPPER_IMPEXP extern
+  #endif /* polyclipping_EXPORTS */
+#else /* defined (_WIN32) */
+ #define CLIPPER_EXPORT
+#endif
+
 namespace ClipperLib {
 
 enum ClipType { ctIntersection, ctUnion, ctDifference, ctXor };
@@ -76,7 +94,7 @@
 typedef unsigned long long cUInt;
 #endif
 
-struct IntPoint {
+struct CLIPPER_EXPORT IntPoint {
   cInt X;
   cInt Y;
 #ifdef use_xyz
@@ -103,11 +121,11 @@
 inline Path& operator <<(Path& poly, const IntPoint& p) {poly.push_back(p); return poly;}
 inline Paths& operator <<(Paths& polys, const Path& p) {polys.push_back(p); return polys;}
 
-std::ostream& operator <<(std::ostream &s, const IntPoint &p);
-std::ostream& operator <<(std::ostream &s, const Path &p);
-std::ostream& operator <<(std::ostream &s, const Paths &p);
+CLIPPER_EXPORT std::ostream& operator <<(std::ostream &s, const IntPoint &p);
+CLIPPER_EXPORT std::ostream& operator <<(std::ostream &s, const Path &p);
+CLIPPER_EXPORT std::ostream& operator <<(std::ostream &s, const Paths &p);
 
-struct DoublePoint
+struct CLIPPER_EXPORT DoublePoint
 {
   double X;
   double Y;
@@ -127,10 +145,10 @@
   enum EndType_ {etClosed, etButt = 2, etSquare, etRound};
 #endif
 
-class PolyNode;
+class CLIPPER_EXPORT PolyNode;
 typedef std::vector< PolyNode* > PolyNodes;
 
-class PolyNode 
+class CLIPPER_EXPORT PolyNode 
 { 
 public:
     PolyNode();
@@ -152,7 +170,7 @@
     friend class ClipperOffset; 
 };
 
-class PolyTree: public PolyNode
+class CLIPPER_EXPORT PolyTree: public PolyNode
 { 
 public:
     ~PolyTree(){Clear();};
@@ -164,49 +182,49 @@
     friend class Clipper; //to access AllNodes
 };
 
-bool Orientation(const Path &poly);
-double Area(const Path &poly);
-int PointInPolygon(const IntPoint &pt, const Path &path);
+CLIPPER_EXPORT bool Orientation(const Path &poly);
+CLIPPER_EXPORT double Area(const Path &poly);
+CLIPPER_EXPORT int PointInPolygon(const IntPoint &pt, const Path &path);
 
 #ifdef use_deprecated
-  void OffsetPaths(const Paths &in_polys, Paths &out_polys,
+  CLIPPER_EXPORT void OffsetPaths(const Paths &in_polys, Paths &out_polys,
     double delta, JoinType jointype, EndType_ endtype, double limit = 0);
 #endif
 
-void SimplifyPolygon(const Path &in_poly, Paths &out_polys, PolyFillType fillType = pftEvenOdd);
-void SimplifyPolygons(const Paths &in_polys, Paths &out_polys, PolyFillType fillType = pftEvenOdd);
-void SimplifyPolygons(Paths &polys, PolyFillType fillType = pftEvenOdd);
-
-void CleanPolygon(const Path& in_poly, Path& out_poly, double distance = 1.415);
-void CleanPolygon(Path& poly, double distance = 1.415);
-void CleanPolygons(const Paths& in_polys, Paths& out_polys, double distance = 1.415);
-void CleanPolygons(Paths& polys, double distance = 1.415);
+CLIPPER_EXPORT void SimplifyPolygon(const Path &in_poly, Paths &out_polys, PolyFillType fillType = pftEvenOdd);
+CLIPPER_EXPORT void SimplifyPolygons(const Paths &in_polys, Paths &out_polys, PolyFillType fillType = pftEvenOdd);
+CLIPPER_EXPORT void SimplifyPolygons(Paths &polys, PolyFillType fillType = pftEvenOdd);
+
+CLIPPER_EXPORT void CleanPolygon(const Path& in_poly, Path& out_poly, double distance = 1.415);
+CLIPPER_EXPORT void CleanPolygon(Path& poly, double distance = 1.415);
+CLIPPER_EXPORT void CleanPolygons(const Paths& in_polys, Paths& out_polys, double distance = 1.415);
+CLIPPER_EXPORT void CleanPolygons(Paths& polys, double distance = 1.415);
 
-void MinkowskiSum(const Path& pattern, const Path& path, Paths& solution, bool pathIsClosed);
-void MinkowskiSum(const Path& pattern, const Paths& paths, 
+CLIPPER_EXPORT void MinkowskiSum(const Path& pattern, const Path& path, Paths& solution, bool pathIsClosed);
+CLIPPER_EXPORT void MinkowskiSum(const Path& pattern, const Paths& paths, 
   Paths& solution, PolyFillType pathFillType, bool pathIsClosed);
-void MinkowskiDiff(const Path& poly1, const Path& poly2, Paths& solution);
+CLIPPER_EXPORT void MinkowskiDiff(const Path& poly1, const Path& poly2, Paths& solution);
 
-void PolyTreeToPaths(const PolyTree& polytree, Paths& paths);
-void ClosedPathsFromPolyTree(const PolyTree& polytree, Paths& paths);
-void OpenPathsFromPolyTree(PolyTree& polytree, Paths& paths);
+CLIPPER_EXPORT void PolyTreeToPaths(const PolyTree& polytree, Paths& paths);
+CLIPPER_EXPORT void ClosedPathsFromPolyTree(const PolyTree& polytree, Paths& paths);
+CLIPPER_EXPORT void OpenPathsFromPolyTree(PolyTree& polytree, Paths& paths);
 
-void ReversePath(Path& p);
-void ReversePaths(Paths& p);
+CLIPPER_EXPORT void ReversePath(Path& p);
+CLIPPER_EXPORT void ReversePaths(Paths& p);
 
-struct IntRect { cInt left; cInt top; cInt right; cInt bottom; };
+struct CLIPPER_EXPORT IntRect { cInt left; cInt top; cInt right; cInt bottom; };
 
 //enums that are used internally ...
 enum EdgeSide { esLeft = 1, esRight = 2};
 
 //forward declarations (for stuff used internally) ...
-struct TEdge;
-struct IntersectNode;
-struct LocalMinima;
-struct Scanbeam;
-struct OutPt;
-struct OutRec;
-struct Join;
+struct CLIPPER_EXPORT TEdge;
+struct CLIPPER_EXPORT IntersectNode;
+struct CLIPPER_EXPORT LocalMinima;
+struct CLIPPER_EXPORT Scanbeam;
+struct CLIPPER_EXPORT OutPt;
+struct CLIPPER_EXPORT OutRec;
+struct CLIPPER_EXPORT Join;
 
 typedef std::vector < OutRec* > PolyOutList;
 typedef std::vector < TEdge* > EdgeList;
@@ -219,7 +237,7 @@
 //ClipperBase is the ancestor to the Clipper class. It should not be
 //instantiated directly. This class simply abstracts the conversion of sets of
 //polygon coordinates into edge objects that are stored in a LocalMinima list.
-class ClipperBase
+class CLIPPER_EXPORT ClipperBase
 {
 public:
   ClipperBase();
@@ -249,7 +267,7 @@
 };
 //------------------------------------------------------------------------------
 
-class Clipper : public virtual ClipperBase
+class CLIPPER_EXPORT Clipper : public virtual ClipperBase
 {
 public:
   Clipper(int initOptions = 0);
@@ -349,7 +367,7 @@
 };
 //------------------------------------------------------------------------------
 
-class ClipperOffset 
+class CLIPPER_EXPORT ClipperOffset 
 {
 public:
   ClipperOffset(double miterLimit = 2.0, double roundPrecision = 0.25);
@@ -380,7 +398,7 @@
 };
 //------------------------------------------------------------------------------
 
-class clipperException : public std::exception
+class CLIPPER_EXPORT clipperException : public std::exception
 {
   public:
     clipperException(const char* description): m_descr(description) {}
 
 
