# Maintainer: Filip Brcic <brcha@gna.org>

_svn_revision=2215
pkgname=mingw-w64-angleproject
pkgver="1.0.0.r${_svn_revision}"
pkgrel=1
pkgdesc='Angle project (mingw-w64)'
arch=('any')
url='http://code.google.com/p/angleproject/'
license=('LGPLv2+')
makedepends=('mingw-w64-gcc' 'gyp-svn')
options=('!strip' '!buildflags' 'staticlibs')
source=("angleproject-r${_svn_revision}.tar.bz2"
        'angleproject-fix-case-sensitive-include.patch'
        'angleproject-include-import-library-and-use-def-file.patch'
        'angleproject-fix-mingw-compatibility.patch'
        'angleproject-fix-typedefs-for-win64.patch'
        'angleproject-export-shader-symbols.patch')
md5sums=('ed7c61ccf10d14b2dad3d466b799f991'
         '3c66f4870446b66b4782a37dc580f5ba'
         '65b24ba01b681ab4e59e117503937f82'
         '10b197b483a543fcf7e1ae5ec379848f'
         '20272d2b46091f629962f4f597973ff5'
         'b238dae4afc4480ea84c9107dccfd6f1')

_architectures="i686-w64-mingw32 x86_64-w64-mingw32"

prepare () {
  cd "${srcdir}/angleproject"
  
  # File names are case-sensitive on Linux
  patch -p0 -i "${srcdir}"/angleproject-fix-case-sensitive-include.patch
  
  # Make sure an import library is created and the correct .def file is used during the build
  patch -p0 -i "${srcdir}"/angleproject-include-import-library-and-use-def-file.patch
  
  # .def pieces taken from http://qt.gitorious.org/qt/qtbase/commit/b2c44985e740d0a0ea86b7b9f4cc849258ac2340
  patch -p0 -i "${srcdir}"/angleproject-fix-mingw-compatibility.patch
  
  # http://qt.gitorious.org/qt/qtbase/commit/dc2bfb6f8977732e1cd5ed9faac5a32870e2967a
  # Fix typedefs for Win64
  # The long int type is incorrect for Windows 64-bit as LLP64 is used there.
  patch -p4 -i "${srcdir}"/angleproject-fix-typedefs-for-win64.patch
  
  # WebKit depends on symbols which are used in the static library called translator_hlsl
  # This static library is linked into the libGLESv2 shared library
  # To allow building WebKit export the required symbols in the libGLESv2 shared library
  patch -p0 -i "${srcdir}"/angleproject-export-shader-symbols.patch
}

build() {
  cd "${srcdir}/angleproject"

  export CFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4"
  export CXXFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4"
  unset LDFLAGS
    
  for _arch in ${_architectures}
  do
    mkdir -p build-${_arch} && pushd build-${_arch}
    
    export CXX="${_arch}-g++"
    export AR="${_arch}-ar"

    if [ "${_arch}" = "i686-w64-mingw32" ]
    then
      target="win32"
    else
      target="win64"
    fi

    gyp -D OS=win -D TARGET=$target --depth . -I ../build/common.gypi ../src/build_angle.gyp

    # Make sure the correct libraries are linked in
    sed -i s@'^LIBS :='@'LIBS := -ld3d9'@ ../src/libGLESv2.target.mk
    sed -i s@'^LIBS :='@'LIBS := -ld3d9 -ldxguid -L. -lGLESv2'@ ../src/libEGL.target.mk

    make V=1 CXXFLAGS="-std=c++11 -msse2 -DUNICODE -D_UNICODE"

    # Also build static libraries (which are needed by the static Qt build)
    ${AR} rcs libGLESv2.a out/Debug/obj.target/libGLESv2/../src/common/debug.o out/Debug/obj.target/libGLESv2/../src/common/RefCountObject.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/IndexDataManager.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/VertexDataManager.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Blit.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/Buffer.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Context.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/D3DConstantTable.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Fence.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/Float16ToFloat32.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Framebuffer.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/HandleAllocator.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/libGLESv2.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/main.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Program.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/ProgramBinary.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Query.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/Renderbuffer.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/ResourceManager.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/Shader.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/Texture.o out/Debug/obj.target/libGLESv2/../src/libGLESv2/TextureSSE2.o \
      out/Debug/obj.target/libGLESv2/../src/libGLESv2/utilities.o out/Debug/obj.target/../src/libtranslator_hlsl.a \
      out/Debug/obj.target/../src/libtranslator_common.a out/Debug/obj.target/../src/libpreprocessor.a 
    ${AR} rcs libEGL.a out/Debug/obj.target/libEGL/../src/common/debug.o out/Debug/obj.target/libEGL/../src/common/RefCountObject.o \
      out/Debug/obj.target/libEGL/../src/libEGL/Config.o out/Debug/obj.target/libEGL/../src/libEGL/Display.o \
      out/Debug/obj.target/libEGL/../src/libEGL/libEGL.o out/Debug/obj.target/libEGL/../src/libEGL/main.o \
      out/Debug/obj.target/libEGL/../src/libEGL/Surface.o
    
    popd
  done
}

package() {
  cd "${srcdir}/angleproject"

  for _arch in ${_architectures}
  do
    pushd build-${_arch}

    mkdir -p "${pkgdir}"/usr/${_arch}/{bin,lib,include}

    install out/Debug/src/libGLESv2.so "${pkgdir}"/usr/${_arch}/bin/libGLESv2.dll
    install out/Debug/src/libEGL.so "${pkgdir}"/usr/${_arch}/bin/libEGL.dll

    install libGLESv2.a "${pkgdir}"/usr/${_arch}/lib/
    install libEGL.a "${pkgdir}"/usr/${_arch}/lib/

    install libGLESv2.dll.a "${pkgdir}"/usr/${_arch}/lib/
    install libEGL.dll.a "${pkgdir}"/usr/${_arch}/lib/
    cp -Rv ../include/* "${pkgdir}"/usr/${_arch}/include/

    ${_arch}-strip --strip-unneeded "${pkgdir}"/usr/${_arch}/bin/*.dll
    ${_arch}-strip -g "${pkgdir}"/usr/${_arch}/lib/*.a
    popd
  done
}
